#!/usr/bin/env python3

import os
import logging
import sys

from programaker_bridge import (BlockArgument, BlockContext, CollectionBlockArgument,
                          MessageBasedServiceRegistration, ProgramakerBridge,
                          VariableBlockArgument)
from programaker_matrix_service import ProgramakerBot, assets, config, storage

BOT_ADDRESS = config.get_matrix_bot_address()

IS_PUBLIC = os.getenv('MATRIX_PUBLIC_BRIDGE', '0') in ('1', 't', 'true')

class Registerer(MessageBasedServiceRegistration):
    def __init__(self, bridge, *args, **kwargs):
        MessageBasedServiceRegistration.__init__(self, *args, **kwargs)
        self.bridge = bridge
        self.connection_strings = {}

    def get_call_to_action_text(self, extra_data):
        if not extra_data:
            return 'Just greet {bot_addr}'.format(bot_addr=BOT_ADDRESS)

        connection_id = extra_data.user_id
        self.connection_strings[connection_id] = connection_id
        return (
            'Send the following to {bot_addr}<console>!register {user_id}</console>'
            .format(bot_addr=BOT_ADDRESS, user_id=extra_data.user_id))

    def perform_side_authentication(self, keyword, username):
        if keyword not in self.connection_strings:
            return False

        connection_id = self.connection_strings[keyword]
        del self.connection_strings[keyword]

        self.bridge.establish_connection(connection_id, name=username)
        return True

# Global objects
STORAGE = storage.get_engine()

MATRIX_INSTANCE = config.get_matrix_instance()
MATRIX_USER = config.get_user()
MATRIX_PASSWORD = config.get_password()
BRIDGE_ENDPOINT = config.get_bridge_endpoint()
AUTH_TOKEN = config.get_auth_token()

BOT = ProgramakerBot(MATRIX_USER, MATRIX_PASSWORD, MATRIX_INSTANCE)

bridge = ProgramakerBridge(name="Matrix.im",
                           is_public=IS_PUBLIC,
                           events=['on_new_message', 'on_new_message_from_channel'],
                           collections=['channels'],
                           icon=assets.open_icon(),
                           endpoint=BRIDGE_ENDPOINT,
                           token=AUTH_TOKEN,
                           allow_multiple_connections=False)

REGISTERER = Registerer(bridge=bridge)
bridge.registerer = REGISTERER

# Events
CHANNEL_COLLECTION = bridge.collections.channels
on_new_message_event = bridge.events.on_new_message
on_new_message_event.add_trigger_block(
    id="on_new_message",
    message="When I say something in any channel. Set %1",
    arguments=[VariableBlockArgument(str)],
    save_to=BlockContext.ARGUMENTS[0],
)
on_new_message_event.add_trigger_block(
    id="on_command",
    message="When I say %1 on any channel",
    arguments=[BlockArgument(str, "!start")],
    expected_value=BlockContext.ARGUMENTS[0],
)

on_new_message_from_channel_event = bridge.events.on_new_message_from_channel
on_new_message_from_channel_event.add_trigger_block(
    id="on_new_message_from_channel",
    message="On message on %1. Set %2",
    arguments=[
        CollectionBlockArgument(CHANNEL_COLLECTION),
        VariableBlockArgument(str),
    ],
    subkey=BlockContext.ARGUMENTS[0],
    save_to=BlockContext.ARGUMENTS[1],
)
on_new_message_from_channel_event.add_trigger_block(
    id="on_command_from_channel",
    message="When received %1 on %2",
    arguments=[
        BlockArgument(str, "!start"),
        CollectionBlockArgument(CHANNEL_COLLECTION),
    ],
    expected_value=BlockContext.ARGUMENTS[0],
    subkey=BlockContext.ARGUMENTS[1],
)

## Matrix bot handler functions
ROOMS = {}
MEMBERS = {}


class BotHandler:
    def __init__(self, bot):
        self.bot = bot

    def joined_room(self, room):
        room.update_room_name()
        logging.info("JOINED room_id={room}".format(room=room.room_id))

    def set_room_members(self, room, members):
        ROOMS[room] = members
        for member in members:
            if member.user_id not in MEMBERS:
                MEMBERS[member.user_id] = []

            MEMBERS[member.user_id].append(room)

    def on_new_message(self, room, event):
        user = event.get('sender', None)
        if user.strip() == BOT_ADDRESS:
            # Ignore events triggered by the bot itself
            return

        content = event.get('content', {})
        if not content or not content.get('body', None):
            logging.debug('CONTROL event: {}'.format(event))
            return

        if self._check_message_for_registration(event, room, user):
            BOT.send(
                room.room_id,
                "Welcome! You're registered now!\n"
                "You can now use this bot in PrograMaker.",
            )

        if not STORAGE.is_matrix_user_registered(user):
            self._on_non_registered_event(user, room, event)
        else:
            for programaker_user in STORAGE.get_programaker_users_from_matrix(user):
                on_new_message_event.send(
                    to_user=programaker_user,
                    content=event['content']['body'],
                    event=event,
                )
                on_new_message_from_channel_event.send(
                    to_user=programaker_user,
                    content=event['content']['body'],
                    event=event,
                    subkey=room.room_id,
                )


    def _check_message_for_registration(self, event, room, user):
        msg = event['content']['body'].strip()
        prefix = '!register '
        if msg.startswith(prefix):
            register_id = msg[len(prefix):]
            if REGISTERER.perform_side_authentication(register_id, user):
                STORAGE.register_user(user, register_id)
                return True
        return False

    def _on_non_registered_event(self, user, room, event):
        if 'body' not in event['content']:
            return

        # # When a user is not registered, the bot does not respond.
        # # This is opposed to Telegram bot operation.
        # # The reason for this is that the bot doesn't know if it's being addressed.
        # # In case that is implemented, this be enabled.
        # BOT.send(room.room_id,
        #          "Hi! I'm a bot you can program yourself!\n"
        #          "Check PrograMaker.com for more information :)",
        # )


BOT.handler = BotHandler(BOT)


@CHANNEL_COLLECTION.getter
def get_channels_for_user(user_id, extra_data):
    logging.info(
        "Get collection get_known_channels # user_id={}".format(user_id))
    results = {}
    for user in STORAGE.get_matrix_users(user_id):
        for room in MEMBERS[user]:
            results[room.room_id] = {"name": room.display_name}

    return results


## Operations
@bridge.operation(id="answer_message",
                  message="Respond %1",
                  arguments=[BlockArgument(str, "Hello")])
def answer_message(message, extra_data):
    if extra_data.last_monitor_value is None:
        logging.error("Answer_message without previous call")
        return

    room_id = (extra_data.last_monitor_value.get("room_id", None))

    logging.info("OPERATION answer_message # room_id={}".format(room_id))
    BOT.send(room_id, str(message))


@bridge.operation(
    id="send_message",
    message="On channel %1 say %2",
    arguments=[
        CollectionBlockArgument(CHANNEL_COLLECTION),
        BlockArgument(str, "Hello"),
    ],
)
def send_message(room_id, message, extra_data):
    logging.info("OPERATION send_message # room_id={}".format(room_id))
    BOT.send(room_id, str(message))


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO,
                        format='%(levelname)-8s %(message)s')

    logging.info("Starting matrix BOT")
    BOT.start()
    logging.info("Starting matrix bridge")
    bridge.run()
    sys.exit(1)
